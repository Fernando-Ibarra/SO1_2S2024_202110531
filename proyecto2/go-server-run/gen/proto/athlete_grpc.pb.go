// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: athlete.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Athleteuide_CreateAthlete_FullMethodName = "/main.Athleteuide/CreateAthlete"
)

// AthleteuideClient is the client API for Athleteuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AthleteuideClient interface {
	CreateAthlete(ctx context.Context, in *AthleteRequest, opts ...grpc.CallOption) (*AthleteResponse, error)
}

type athleteuideClient struct {
	cc grpc.ClientConnInterface
}

func NewAthleteuideClient(cc grpc.ClientConnInterface) AthleteuideClient {
	return &athleteuideClient{cc}
}

func (c *athleteuideClient) CreateAthlete(ctx context.Context, in *AthleteRequest, opts ...grpc.CallOption) (*AthleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AthleteResponse)
	err := c.cc.Invoke(ctx, Athleteuide_CreateAthlete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AthleteuideServer is the server API for Athleteuide service.
// All implementations must embed UnimplementedAthleteuideServer
// for forward compatibility.
type AthleteuideServer interface {
	CreateAthlete(context.Context, *AthleteRequest) (*AthleteResponse, error)
	mustEmbedUnimplementedAthleteuideServer()
}

// UnimplementedAthleteuideServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAthleteuideServer struct{}

func (UnimplementedAthleteuideServer) CreateAthlete(context.Context, *AthleteRequest) (*AthleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAthlete not implemented")
}
func (UnimplementedAthleteuideServer) mustEmbedUnimplementedAthleteuideServer() {}
func (UnimplementedAthleteuideServer) testEmbeddedByValue()                     {}

// UnsafeAthleteuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AthleteuideServer will
// result in compilation errors.
type UnsafeAthleteuideServer interface {
	mustEmbedUnimplementedAthleteuideServer()
}

func RegisterAthleteuideServer(s grpc.ServiceRegistrar, srv AthleteuideServer) {
	// If the following call pancis, it indicates UnimplementedAthleteuideServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Athleteuide_ServiceDesc, srv)
}

func _Athleteuide_CreateAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AthleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteuideServer).CreateAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Athleteuide_CreateAthlete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteuideServer).CreateAthlete(ctx, req.(*AthleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Athleteuide_ServiceDesc is the grpc.ServiceDesc for Athleteuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Athleteuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Athleteuide",
	HandlerType: (*AthleteuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAthlete",
			Handler:    _Athleteuide_CreateAthlete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "athlete.proto",
}
